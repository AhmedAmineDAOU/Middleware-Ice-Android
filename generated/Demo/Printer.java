// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public interface Printer extends com.zeroc.Ice.Object
{
    String printString(String s, com.zeroc.Ice.Current current);

    music[] findByName(String songName, com.zeroc.Ice.Current current);

    music[] findAllMusics(com.zeroc.Ice.Current current);

    music[] findByAuth(String authorName, com.zeroc.Ice.Current current);

    music[] findByAlbum(String albumName, com.zeroc.Ice.Current current);

    music[] findByGenre(String genre, com.zeroc.Ice.Current current);

    music getMusicByName(String name, com.zeroc.Ice.Current current);

    byte[] getCoverByMusic(String path, com.zeroc.Ice.Current current);

    void addToFavorites(String songname, com.zeroc.Ice.Current current);

    void removeFromFavorites(String songname, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Demo::Printer",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Demo::Printer";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_printString(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_s;
        iceP_s = istr.readString();
        inS.endReadParams();
        String ret = obj.printString(iceP_s, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByName(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_songName;
        iceP_songName = istr.readString();
        inS.endReadParams();
        music[] ret = obj.findByName(iceP_songName, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        listmusicHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findAllMusics(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        music[] ret = obj.findAllMusics(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        listmusicHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByAuth(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_authorName;
        iceP_authorName = istr.readString();
        inS.endReadParams();
        music[] ret = obj.findByAuth(iceP_authorName, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        listmusicHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByAlbum(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_albumName;
        iceP_albumName = istr.readString();
        inS.endReadParams();
        music[] ret = obj.findByAlbum(iceP_albumName, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        listmusicHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_findByGenre(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_genre;
        iceP_genre = istr.readString();
        inS.endReadParams();
        music[] ret = obj.findByGenre(iceP_genre, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        listmusicHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMusicByName(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_name;
        iceP_name = istr.readString();
        inS.endReadParams();
        music ret = obj.getMusicByName(iceP_name, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        music.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCoverByMusic(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        byte[] ret = obj.getCoverByMusic(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeByteSeq(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addToFavorites(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_songname;
        iceP_songname = istr.readString();
        inS.endReadParams();
        obj.addToFavorites(iceP_songname, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_removeFromFavorites(Printer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_songname;
        iceP_songname = istr.readString();
        inS.endReadParams();
        obj.removeFromFavorites(iceP_songname, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    final static String[] _iceOps =
    {
        "addToFavorites",
        "findAllMusics",
        "findByAlbum",
        "findByAuth",
        "findByGenre",
        "findByName",
        "getCoverByMusic",
        "getMusicByName",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "printString",
        "removeFromFavorites"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addToFavorites(this, in, current);
            }
            case 1:
            {
                return _iceD_findAllMusics(this, in, current);
            }
            case 2:
            {
                return _iceD_findByAlbum(this, in, current);
            }
            case 3:
            {
                return _iceD_findByAuth(this, in, current);
            }
            case 4:
            {
                return _iceD_findByGenre(this, in, current);
            }
            case 5:
            {
                return _iceD_findByName(this, in, current);
            }
            case 6:
            {
                return _iceD_getCoverByMusic(this, in, current);
            }
            case 7:
            {
                return _iceD_getMusicByName(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 11:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 12:
            {
                return _iceD_printString(this, in, current);
            }
            case 13:
            {
                return _iceD_removeFromFavorites(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
